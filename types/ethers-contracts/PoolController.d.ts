/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoolControllerInterface extends ethers.utils.Interface {
  functions: {
    "canMint(address)": FunctionFragment;
    "devAddress()": FunctionFragment;
    "duck()": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "newPool(address,uint256,uint256[],uint256[])": FunctionFragment;
    "addPeriod(uint256,uint256,uint256,uint256)": FunctionFragment;
    "addRevenue(uint256,address,uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "canMint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "devAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duck", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newPool",
    values: [string, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addPeriod",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRevenue",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRevenue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;

  events: {
    "NewPool(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PoolController extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolControllerInterface;

  functions: {
    canMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "canMint(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    devAddress(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "devAddress()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    duck(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "duck()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newPool(
      lpToken: string,
      startingBlock: BigNumberish,
      blocks: BigNumberish[],
      farmingSupplies: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newPool(address,uint256,uint256[],uint256[])"(
      lpToken: string,
      startingBlock: BigNumberish,
      blocks: BigNumberish[],
      farmingSupplies: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addPeriod(
      poolIndex: BigNumberish,
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPeriod(uint256,uint256,uint256,uint256)"(
      poolIndex: BigNumberish,
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addRevenue(
      poolIndex: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRevenue(uint256,address,uint256)"(
      poolIndex: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  canMint(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "canMint(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  devAddress(overrides?: CallOverrides): Promise<string>;

  "devAddress()"(overrides?: CallOverrides): Promise<string>;

  duck(overrides?: CallOverrides): Promise<string>;

  "duck()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "pools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newPool(
    lpToken: string,
    startingBlock: BigNumberish,
    blocks: BigNumberish[],
    farmingSupplies: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newPool(address,uint256,uint256[],uint256[])"(
    lpToken: string,
    startingBlock: BigNumberish,
    blocks: BigNumberish[],
    farmingSupplies: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addPeriod(
    poolIndex: BigNumberish,
    startingBlock: BigNumberish,
    blocks: BigNumberish,
    farmingSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPeriod(uint256,uint256,uint256,uint256)"(
    poolIndex: BigNumberish,
    startingBlock: BigNumberish,
    blocks: BigNumberish,
    farmingSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addRevenue(
    poolIndex: BigNumberish,
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRevenue(uint256,address,uint256)"(
    poolIndex: BigNumberish,
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    canMint(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "canMint(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    devAddress(overrides?: CallOverrides): Promise<string>;

    "devAddress()"(overrides?: CallOverrides): Promise<string>;

    duck(overrides?: CallOverrides): Promise<string>;

    "duck()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    newPool(
      lpToken: string,
      startingBlock: BigNumberish,
      blocks: BigNumberish[],
      farmingSupplies: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "newPool(address,uint256,uint256[],uint256[])"(
      lpToken: string,
      startingBlock: BigNumberish,
      blocks: BigNumberish[],
      farmingSupplies: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addPeriod(
      poolIndex: BigNumberish,
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPeriod(uint256,uint256,uint256,uint256)"(
      poolIndex: BigNumberish,
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRevenue(
      poolIndex: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRevenue(uint256,address,uint256)"(
      poolIndex: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewPool(poolAddress: string | null, lpToken: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    canMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "canMint(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    devAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "devAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    duck(overrides?: CallOverrides): Promise<BigNumber>;

    "duck()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newPool(
      lpToken: string,
      startingBlock: BigNumberish,
      blocks: BigNumberish[],
      farmingSupplies: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newPool(address,uint256,uint256[],uint256[])"(
      lpToken: string,
      startingBlock: BigNumberish,
      blocks: BigNumberish[],
      farmingSupplies: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    addPeriod(
      poolIndex: BigNumberish,
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPeriod(uint256,uint256,uint256,uint256)"(
      poolIndex: BigNumberish,
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addRevenue(
      poolIndex: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRevenue(uint256,address,uint256)"(
      poolIndex: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canMint(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "duck()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newPool(
      lpToken: string,
      startingBlock: BigNumberish,
      blocks: BigNumberish[],
      farmingSupplies: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newPool(address,uint256,uint256[],uint256[])"(
      lpToken: string,
      startingBlock: BigNumberish,
      blocks: BigNumberish[],
      farmingSupplies: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addPeriod(
      poolIndex: BigNumberish,
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPeriod(uint256,uint256,uint256,uint256)"(
      poolIndex: BigNumberish,
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addRevenue(
      poolIndex: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRevenue(uint256,address,uint256)"(
      poolIndex: BigNumberish,
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
