/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoolInterface extends ethers.utils.Interface {
  functions: {
    "accDuckPerShare()": FunctionFragment;
    "controller()": FunctionFragment;
    "duck()": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "lpToken()": FunctionFragment;
    "periods(uint256)": FunctionFragment;
    "revenues(uint256)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "addPeriod(uint256,uint256,uint256)": FunctionFragment;
    "updatePool()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getUserPendingReward(address)": FunctionFragment;
    "getCurrentPeriodIndex()": FunctionFragment;
    "calculateDuckTokensForMint()": FunctionFragment;
    "addRevenue(address,uint256)": FunctionFragment;
    "getUserLastRevenue(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accDuckPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duck", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periods",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revenues",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addPeriod",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriodIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDuckTokensForMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRevenue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLastRevenue",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accDuckPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "periods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revenues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDuckTokensForMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRevenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserLastRevenue",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "NewPeriod(uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Pool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolInterface;

  functions: {
    accDuckPerShare(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accDuckPerShare()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    controller(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "controller()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    duck(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "duck()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    lastRewardBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastRewardBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lpToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "lpToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    periods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startingBlock: BigNumber;
      blocks: BigNumber;
      farmingSupply: BigNumber;
      tokensPerBlock: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "periods(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startingBlock: BigNumber;
      blocks: BigNumber;
      farmingSupply: BigNumber;
      tokensPerBlock: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    revenues(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      totalSupply: BigNumber;
      amount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "revenues(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      totalSupply: BigNumber;
      amount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    addPeriod(
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPeriod(uint256,uint256,uint256)"(
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(overrides?: Overrides): Promise<ContractTransaction>;

    "updatePool()"(overrides?: Overrides): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserPendingReward(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUserPendingReward(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getCurrentPeriodIndex(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getCurrentPeriodIndex()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    calculateDuckTokensForMint(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "calculateDuckTokensForMint()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addRevenue(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRevenue(address,uint256)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserLastRevenue(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "getUserLastRevenue(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;
  };

  accDuckPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  "accDuckPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  duck(overrides?: CallOverrides): Promise<string>;

  "duck()"(overrides?: CallOverrides): Promise<string>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  periods(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startingBlock: BigNumber;
    blocks: BigNumber;
    farmingSupply: BigNumber;
    tokensPerBlock: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "periods(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    startingBlock: BigNumber;
    blocks: BigNumber;
    farmingSupply: BigNumber;
    tokensPerBlock: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  revenues(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    totalSupply: BigNumber;
    amount: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  "revenues(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    tokenAddress: string;
    totalSupply: BigNumber;
    amount: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
  }>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    rewardDebt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "userInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    rewardDebt: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  addPeriod(
    startingBlock: BigNumberish,
    blocks: BigNumberish,
    farmingSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPeriod(uint256,uint256,uint256)"(
    startingBlock: BigNumberish,
    blocks: BigNumberish,
    farmingSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(overrides?: Overrides): Promise<ContractTransaction>;

  "updatePool()"(overrides?: Overrides): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserPendingReward(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserPendingReward(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentPeriodIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculateDuckTokensForMint(overrides?: CallOverrides): Promise<BigNumber>;

  "calculateDuckTokensForMint()"(overrides?: CallOverrides): Promise<BigNumber>;

  addRevenue(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRevenue(address,uint256)"(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserLastRevenue(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
  }>;

  "getUserLastRevenue(address)"(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
  }>;

  callStatic: {
    accDuckPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accDuckPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    duck(overrides?: CallOverrides): Promise<string>;

    "duck()"(overrides?: CallOverrides): Promise<string>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    periods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startingBlock: BigNumber;
      blocks: BigNumber;
      farmingSupply: BigNumber;
      tokensPerBlock: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "periods(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      startingBlock: BigNumber;
      blocks: BigNumber;
      farmingSupply: BigNumber;
      tokensPerBlock: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    revenues(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      totalSupply: BigNumber;
      amount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    "revenues(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenAddress: string;
      totalSupply: BigNumber;
      amount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
    }>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      rewardDebt: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    addPeriod(
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPeriod(uint256,uint256,uint256)"(
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    "updatePool()"(overrides?: CallOverrides): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserPendingReward(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserPendingReward(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriodIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateDuckTokensForMint(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateDuckTokensForMint()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addRevenue(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRevenue(address,uint256)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserLastRevenue(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;

    "getUserLastRevenue(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
    }>;
  };

  filters: {
    Deposit(from: string | null, amount: null): EventFilter;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): EventFilter;

    NewPeriod(
      startingBlock: BigNumberish | null,
      blocks: BigNumberish | null,
      farmingSupply: null
    ): EventFilter;

    Withdraw(to: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    accDuckPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accDuckPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    duck(overrides?: CallOverrides): Promise<BigNumber>;

    "duck()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    periods(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "periods(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenues(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "revenues(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPeriod(
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPeriod(uint256,uint256,uint256)"(
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(overrides?: Overrides): Promise<BigNumber>;

    "updatePool()"(overrides?: Overrides): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserPendingReward(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserPendingReward(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentPeriodIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculateDuckTokensForMint(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateDuckTokensForMint()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addRevenue(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRevenue(address,uint256)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserLastRevenue(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserLastRevenue(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accDuckPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accDuckPerShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "duck()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRewardBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periods(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "periods(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenues(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "revenues(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPeriod(
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPeriod(uint256,uint256,uint256)"(
      startingBlock: BigNumberish,
      blocks: BigNumberish,
      farmingSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updatePool()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserPendingReward(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserPendingReward(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriodIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentPeriodIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDuckTokensForMint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateDuckTokensForMint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addRevenue(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRevenue(address,uint256)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserLastRevenue(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserLastRevenue(address)"(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
